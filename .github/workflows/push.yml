name: Push

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is running on a ${{ runner.os }} server hosted by GitHub!"

      - uses: actions/checkout@v3
      - run: echo "The ${{ github.repository }} repository has been cloned."

      - run: echo "Setting up JDK"
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - run: echo "The workflow is now ready to test your code."

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Access MAPS_API_KEY
        env:
          maps_api_key: ${{ secrets.MAPS_API_KEY }}
        run: echo MAPS_API_KEY=\"$maps_api_key\" > ./local.properties

      - run: echo "Building Debug APK."
      - name: Build with Gradle
        run: ./gradlew build
      - run: echo "Build status report=${{ job.status }}."

      # Here we need to decode keystore.jks from base64 string and place it
      # in the folder specified in the release signing configuration
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'keystore.jks'
          fileDir: '/home/runner/work/TbilisiBus/TbilisiBus/app/'
          encodedString: ${{ secrets.KEYSTORE }}

      # Build and sign APK ("-x test" argument is used to skip tests)
      - name: Build release APK
        run: ./gradlew :app:assembleRelease -x test
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.TBILISI_BUS_SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.TBILISI_BUS_SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.TBILISI_BUS_SIGNING_STORE_PASSWORD }}

      # Show information about the APK's signing certificates
#      - name: Verify Signature
#        run: $ANDROID_SDK_ROOT/build-tools/33.0.1/apksigner verify --print-certs app/build/outputs/apk/release/<<application name>>_${{ github.event.inputs.version }}.apk

      # Save the APK after the Build job is complete to publish it as a Github release in the next job
#      - name: Upload APK
#        uses: actions/upload-artifact@v3.1.2
#        with:
#          name: <<application name>>
#          path: app/build/outputs/apk/release/<<application name>>_${{ github.event.inputs.version }}.apk